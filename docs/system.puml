```plantuml
@startuml
skinparam backgroundColor  `#fefefe`
autonumber
actor Admin #Black
Admin -> SmartContract: Initialize Staking Pool
rnote over Admin
It initialize once  with these fields:
**architect_stake**: minimum stake amount for Architect
**builder_stake**: minimum stake amount for Builder
**validator_stake**: minimum stake amount for Validator
**reward_apy** : Annual percentage yield
**reward_per_block** : time based multiplier
**pool_cap** : total capacity of pool
**penalty** : amount of penalty per violation
endrnote
actor Architect #Green
group Data Validation
Architect -> SmartContract: Request to Create a Campaign
rnote over Architect
Architect define these fields:
**offChainReference** : used by offchain system
**period** : number of day for staking
**min_builder** :minimum builder needed by this campaign
**min_validator** : minimum validation needed by per utterance
**reward_per_builder**: reward for builder
**reward_per_validator** : reward of validator per utterance
**validation_quorum** : later useed to calculate minimum correction
**topic_domain**
**topic_subject**
**topic_explain**
**seed_phrase**
endrnote
SmartContract -> Campaign: Campaign Created by smart Contract
rnote over Campaign
Campaign created and added to list of campaign
on state of smart contract but not available
until same architect stake to campaign it should
check with **stake_status** field
endrnote
Architect -> Campaign: Architect Stake to Campaign
rnote over Campaign
a stake account create for **Architect**
and the field of  **stake_status** set **true**
endrnote
actor Builder #Orange
Builder -> Campaign: Stake to campaign
rnote over Campaign
a stake account create for **Builder**
and the field of  **stake_status** set **true**
endrnote
Builder -> Campaign: Submit Utterance to campaign
rnote over Campaign
Builder send **utterance** to specific **campaign**
with rules that **Arhcitect** defined
endrnote
actor Validator #Blue
Validator -> Campaign: Stake to campaign
rnote over Campaign
a stake account create for **Validator**
and the field of  **stake_status** set **true**
endrnote
Validator -> Campaign: Validate Submitted Utterance to campaign
rnote over Campaign
**Validator** check every **utterance** in **campaings** and mark
those as **true** or **false**
endrnote
Campaign -> FinishCampaign: when meet minimum validation per utterance
rnote over Campaign
On last validation smarft contract trigger ther finish
campaign if it meet requirment and emit event
endrnote
end
group Offchain Integration
Campaign -> Offchain : Send event and data
rnote over Offchain
Offchain daemon observing events of smart contract
and pick the finish event for campaign
endrnote
end
group Reward Distribution
FinishCampaign -> Reward : Distribute reward based on token economy
Reward -> Architect : based validated utterance
Reward -> Builder : based on number of submitted utterance and validation process
Reward -> Validator : based on number of validation and rank of validation
end
group Claim Reward
Architect -> Unstake : get reward based on time and amount of staking
Unstake -> Offchain : Account Closed and Send data to offchain
Builder -> Unstake : get reward based on time and amount of staking
Unstake -> Offchain : Account Closed and Send data to offchain
Validator -> Unstake : get reward based on time and amount of staking
Unstake -> Offchain : Account Closed and Send data to offchain
end
@enduml
```
